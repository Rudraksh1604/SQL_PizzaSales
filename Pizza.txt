--- Retrieve the total number of orders placed.

SELECT COUNT(order_id) as Total_Orders from orders; 

--- Calculate the total revenue generated from pizza sales.

SELECT SUM(order_details.quantity * pizzas.price ) as Total_sales 
from order_details 
join pizzas 
on pizzas.pizza_id = order_details.pizza_id;

-- Identify the highest-priced pizza.

select pizza_types.name as Pizza, pizzas.price as Most_expensive_Pizza 
from pizzas
join pizza_types
on pizza_types.pizza_type_id =pizzas.pizza_type_id
order by pizzas.price  DESC limit 1;

-- Identify the most common pizza size ordered.

SELECT pizzas.size, COUNT(order_details.order_details_id) as order_count
from pizzas
join order_details
on pizzas.pizza_id = order_details.pizza_id 
group by pizzas.size order by order_count desc limit 1;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT pizza_types.name as Pizza_Name, sum(order_details.quantity) Quantity
from pizzas  join pizza_types
ON pizzas.pizza_type_id = pizza_types.pizza_type_id 
JOIN order_details
on order_details.pizza_id = pizzas.pizza_id 
group by Pizza_Name
order by quantity desc limit 5;

--- Intermidiate
-- Join the necessary tables to find the total quantity of each pizza category ordered.

select pt.category as Pizza_category, SUM(od.quantity) as quantity
from pizza_types as pt join pizzas
on pt.pizza_type_id =pizzas.pizza_type_id 
join order_details as od
on od.pizza_id = pizzas.pizza_id 
group by Pizza_category 
order by quantity;



---- Determine the distribution of orders by hour of the day.

SELECT HOUR(orders.`time`) as hour, COUNT(orders.order_id) as Orders
from orders 
group by hour(orders.time)
order by orders Desc;

---- Join relevant tables to find the category-wise distribution of pizzas.

SELECT category, count(pizza_type_id) as Counts
from pizza_types
group by category 
order by Counts desc;

SELECT pizza_type_id from pizza_types;



--- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT AVG(quantity) as orders from 
(SELECT orders.`date` , Sum(order_details.quantity) as quantity
from orders 
join order_details 
on order_details.order_id = orders.order_id
group by orders.`date` 
order by quantity desc) as avg_orders;


--- Determine the top 3 most ordered pizza types based on revenue.

SELECT pizza_types.category, SUM(order_details.quantity * pizzas.price) as revenue from pizza_types 
join pizzas 
on pizzas.pizza_type_id =pizza_types.pizza_type_id 
JOIN order_details
on pizzas.pizza_id =order_details.pizza_id 
group by pizza_types.category 
order by revenue desc limit 3;

SELECT pizza_types.name, 
       SUM(order_details.quantity * pizzas.price) AS revenue
FROM pizza_types 
JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY pizza_types.name 
ORDER BY revenue DESC limit 3;

---- Advanced:
---- Calculate the percentage contribution of each pizza type to total revenue.

SELECT pizza_types.category, ((SUM(order_details.quantity * pizzas.price) / (SELECT SUM(order_details.quantity * pizzas.price ) as Total_sales 
from order_details 
join pizzas 
on pizzas.pizza_id = order_details.pizza_id))*100) as revenue from pizza_types 
join pizzas 
on pizzas.pizza_type_id =pizza_types.pizza_type_id 
JOIN order_details
on pizzas.pizza_id =order_details.pizza_id 
group by pizza_types.category 
order by revenue desc ;


---- Analyze the cumulative revenue generated over time.

 SELECT sales.`date`, sum(sales.revenue) over(order by sales.`date`) as Cum_revenue 
from (SELECT orders.`date` , SUM(order_details.quantity * pizzas.price) as revenue from orders 
join order_details 
on orders.order_id =order_details.order_id 
join pizzas 
on pizzas.pizza_id = order_details.pizza_id 
group by orders.`date` 
order by orders.`date` asc) as sales;


---- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select name, revenue from (select category, Name, revenue,
rank() over(PARTITION by category order by revenue desc) as RN from
(select pizza_types.category, pizza_types.name, SUM(order_details.quantity * pizzas.price) as revenue from pizza_types
join pizzas
on pizzas.pizza_type_id =pizza_types.pizza_type_id 
JOIN order_details
on pizzas.pizza_id =order_details.pizza_id 
group by pizza_types.category, pizza_types.name
order by revenue) as A) as B where RN<=3;



